// <auto-generated />
using System;
using DataAcessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAcessLayer.Migrations
{
    [DbContext(typeof(FoodRecommendationContext))]
    [Migration("20240625065540_complexitiesTable")]
    partial class complexitiesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAcessLayer.Entity.DiscardedMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDiscarded")
                        .HasColumnType("bit");

                    b.Property<int>("MealNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MealNameId")
                        .IsUnique();

                    b.ToTable("DiscardedMenus");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.DiscardedMenuFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiscardedMenuId")
                        .HasColumnType("int");

                    b.Property<string>("DislikeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LikeText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscardedMenuId");

                    b.ToTable("DiscardedMenuFeedbacks");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInMainMenu")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MealNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealNameId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.MealMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Classification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealNameId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfVotes")
                        .HasColumnType("int");

                    b.Property<bool>("WasPrepared")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MealNameId");

                    b.ToTable("MealMenus");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.MealName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CuisinePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSweet")
                        .HasColumnType("bit");

                    b.Property<string>("MealType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SpiceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealNames");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CuisinePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DietType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSweet")
                        .HasColumnType("bit");

                    b.Property<string>("SpiceLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppearanceRating")
                        .HasColumnType("int");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<double>("OverallRating")
                        .HasColumnType("float");

                    b.Property<int>("QualityRating")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ValueForMoneyRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.SummaryRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("SentimentComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SentimentScore")
                        .HasColumnType("float");

                    b.Property<double>("TotalAppearanceRating")
                        .HasColumnType("float");

                    b.Property<double>("TotalQualityRating")
                        .HasColumnType("float");

                    b.Property<double>("TotalQuantityRating")
                        .HasColumnType("float");

                    b.Property<double>("TotalValueForMoneyRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("SummaryRatings");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("DataAcessLayer.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmpId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.DiscardedMenu", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.MealName", "MealName")
                        .WithOne("DiscardedMenu")
                        .HasForeignKey("DataAcessLayer.Entity.DiscardedMenu", "MealNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealName");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.DiscardedMenuFeedback", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.DiscardedMenu", "DiscardedMenu")
                        .WithMany("DiscardedMenuFeedbacks")
                        .HasForeignKey("DiscardedMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscardedMenu");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Meal", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Food", "Food")
                        .WithMany("MealPlans")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.Entity.MealName", "MealName")
                        .WithMany("Meals")
                        .HasForeignKey("MealNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("MealName");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.MealMenu", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.MealName", "MealName")
                        .WithMany()
                        .HasForeignKey("MealNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealName");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Profile", b =>
                {
                    b.HasOne("DataAcessLayer.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("DataAcessLayer.Entity.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Rating", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Food", "Food")
                        .WithMany("Ratings")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Review", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Food", "Food")
                        .WithMany("Reviews")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.SummaryRating", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Food", "Food")
                        .WithOne("SummaryRating")
                        .HasForeignKey("DataAcessLayer.Entity.SummaryRating", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.UserNotification", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAcessLayer.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAcessLayer.User", b =>
                {
                    b.HasOne("DataAcessLayer.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.DiscardedMenu", b =>
                {
                    b.Navigation("DiscardedMenuFeedbacks");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Food", b =>
                {
                    b.Navigation("MealPlans");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("SummaryRating");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.MealName", b =>
                {
                    b.Navigation("DiscardedMenu");

                    b.Navigation("Meals");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("DataAcessLayer.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAcessLayer.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
